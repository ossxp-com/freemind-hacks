From: Jiang Xin <jiangxin@moon.ossxp.com>
Subject: [PATCH] t/output_encode_in_utf8

Save mm file in UTF-8 format.

Signed-off-by: Jiang Xin <jiangxin@moon.ossxp.com>

---
 freemind/accessories/freemind2flash.xsl            |    2 +-
 freemind/accessories/plugins/ExportWithXSLT.java   |    3 +-
 freemind/freemind/main/FreeMind.java               |    3 ++
 freemind/freemind/main/HtmlTools.java              |    2 +-
 freemind/freemind/main/XMLElement.java             |    7 +++-
 freemind/freemind/modes/StylePattern.java          |    2 +-
 .../modes/mindmapmode/MindMapController.java       |    3 +-
 .../modes/mindmapmode/MindMapHTMLWriter.java       |    4 +-
 .../modes/mindmapmode/MindMapMapModel.java         |   32 +++++++++++++++++--
 9 files changed, 45 insertions(+), 13 deletions(-)

diff --git a/freemind/accessories/freemind2flash.xsl b/freemind/accessories/freemind2flash.xsl
index 536936d..926b15b 100644
--- a/freemind/accessories/freemind2flash.xsl
+++ b/freemind/accessories/freemind2flash.xsl
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="iso-8859-1"?>
+<?xml version="1.0" encoding="utf-8"?>
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 version="1.0">
 
diff --git a/freemind/accessories/plugins/ExportWithXSLT.java b/freemind/accessories/plugins/ExportWithXSLT.java
index 850e3f8..d29c638 100644
--- a/freemind/accessories/plugins/ExportWithXSLT.java
+++ b/freemind/accessories/plugins/ExportWithXSLT.java
@@ -52,6 +52,7 @@ import javax.xml.transform.stream.StreamSource;
 import accessories.plugins.util.html.ClickableImageCreator;
 import accessories.plugins.util.xslt.ExportDialog;
 import freemind.extensions.ExportHook;
+import freemind.main.FreeMind;
 import freemind.main.Resources;
 import freemind.main.Tools;
 import freemind.modes.MindIcon;
@@ -175,7 +176,7 @@ public class ExportWithXSLT extends ExportHook {
     {
         boolean success = true;
 //      Generating output Stream            
-        BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(pDirectoryName+File.separator + "map.mm") ) );
+        BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(pDirectoryName+File.separator + "map.mm"), FreeMind.DEFAULT_CHARSET ) );
         getController().getMap().getFilteredXml(fileout);
         return success;
     }
diff --git a/freemind/freemind/main/FreeMind.java b/freemind/freemind/main/FreeMind.java
index 57dd669..1718355 100644
--- a/freemind/freemind/main/FreeMind.java
+++ b/freemind/freemind/main/FreeMind.java
@@ -86,6 +86,9 @@ import freemind.view.mindmapview.NodeView;
 
 public class FreeMind extends JFrame implements FreeMindMain {
 
+	// OSSXP.COM: set output character set to utf-8.
+	public static final String DEFAULT_CHARSET = "UTF-8";
+
 	private static final String SPLIT_PANE_POSITION = "split_pane_position";
 
 	private static final String SPLIT_PANE_LAST_POSITION = "split_pane_last_position";
diff --git a/freemind/freemind/main/HtmlTools.java b/freemind/freemind/main/HtmlTools.java
index 1a907cd..15038ab 100644
--- a/freemind/freemind/main/HtmlTools.java
+++ b/freemind/freemind/main/HtmlTools.java
@@ -306,7 +306,7 @@ public class HtmlTools {
 		for (int i = 0; i < text.length(); ++i) {
 			myChar = text.charAt(i);
 			intValue = (int) text.charAt(i);
-			if (intValue < 32 || intValue > 126) {
+			if (intValue < 32 || !Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && intValue > 126) {
 				result.append("&#x").append(Integer.toString(intValue, 16))
 						.append(';');
 			} else {
diff --git a/freemind/freemind/main/XMLElement.java b/freemind/freemind/main/XMLElement.java
index 2174b5c..e610275 100644
--- a/freemind/freemind/main/XMLElement.java
+++ b/freemind/freemind/main/XMLElement.java
@@ -2118,7 +2118,8 @@ public class XMLElement
     {
         try {
             ByteArrayOutputStream out = new ByteArrayOutputStream();
-            OutputStreamWriter writer = new OutputStreamWriter(out);
+            // OSSXP.COM: Encode output to default_charset(UTF-8). 
+            OutputStreamWriter writer = new OutputStreamWriter(out, FreeMind.DEFAULT_CHARSET);
             this.write(writer);
             writer.flush();
             return new String(out.toByteArray());
@@ -2270,7 +2271,9 @@ public class XMLElement
                     break;
                 default:
                     int unicode = (int) ch;
-                    if((unicode < 32)||(unicode > 126)) {
+                    // OSSXP.COM: do not convert Chinese characters into &#blahblah;
+                    if (!Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && (unicode > 126) || (unicode < 32)) {
+
                         writer.write('&'); writer.write('#');
                         writer.write('x');
                         writer.write(Integer.toString(unicode, 16));
diff --git a/freemind/freemind/modes/StylePattern.java b/freemind/freemind/modes/StylePattern.java
index c3644eb..7db2e30 100644
--- a/freemind/freemind/modes/StylePattern.java
+++ b/freemind/freemind/modes/StylePattern.java
@@ -504,7 +504,7 @@ public class StylePattern {
 
 
             //Generating output Stream
-            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file) ) );
+            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file) ) ); // in comments
             pattern.write(fileout);
 
             fileout.close();
diff --git a/freemind/freemind/modes/mindmapmode/MindMapController.java b/freemind/freemind/modes/mindmapmode/MindMapController.java
index 28a6678..f6619d3 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapController.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapController.java
@@ -114,6 +114,7 @@ import freemind.extensions.UndoEventReceiver;
 import freemind.extensions.HookFactory.RegistrationContainer;
 import freemind.main.ExampleFileFilter;
 import freemind.main.FixedHTMLWriter;
+import freemind.main.FreeMind;
 import freemind.main.HtmlTools;
 import freemind.main.Resources;
 import freemind.main.Tools;
@@ -1742,7 +1743,7 @@ freemind.main.Resources.getInstance().logException(					e1);
 
     static public void saveHTML(MindMapNodeModel rootNodeOfBranch, File file) throws IOException {
         BufferedWriter fileout = new BufferedWriter(new OutputStreamWriter(
-                new FileOutputStream(file)));
+                new FileOutputStream(file), FreeMind.DEFAULT_CHARSET));
         MindMapHTMLWriter htmlWriter = new MindMapHTMLWriter(
                 fileout);
         htmlWriter.saveHTML(rootNodeOfBranch);      
diff --git a/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java b/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
index 52276ea..f2d0616 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapHTMLWriter.java
@@ -92,7 +92,7 @@ class MindMapHTMLWriter {
         for (int i = 0; i < len; ++i) {
             myChar = text.charAt(i);
             intValue = (int) text.charAt(i);
-            if (intValue >= 128) {
+            if (!Resources.getInstance().getBoolProperty("wh_nonascii_in_utf8") && intValue >= 128) {
                 result.append(convertSpecialChar(myChar));
             }
             else {
@@ -690,4 +690,4 @@ class MindMapHTMLWriter {
         return Resources.getInstance().getProperty(key);
     }
 
-}
\ No newline at end of file
+}
diff --git a/freemind/freemind/modes/mindmapmode/MindMapMapModel.java b/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
index d6a87f7..c83dd56 100644
--- a/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
+++ b/freemind/freemind/modes/mindmapmode/MindMapMapModel.java
@@ -175,7 +175,7 @@ public class MindMapMapModel extends MapAdapter  {
    public boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file) {
         // Returns success of the operation.
         try {
-            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file) ) );
+            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file), FreeMind.DEFAULT_CHARSET ) );
             rootNodeOfBranch.saveTXT(fileout,/*depth=*/0);
             fileout.close();
             return true;
@@ -256,7 +256,8 @@ public class MindMapMapModel extends MapAdapter  {
         	if(timerForAutomaticSaving != null) {
         		timerForAutomaticSaving.cancel();
         	}
-            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file) ) );
+            // OSSXP.COM: save file using default character set.
+            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file), FreeMind.DEFAULT_CHARSET ) );
             getXml(fileout);
 
             if(!isInternal) {
@@ -284,6 +285,8 @@ public class MindMapMapModel extends MapAdapter  {
 	 * @throws IOException
 	 */
 	public void getXml(Writer fileout, boolean saveInvisible) throws IOException {
+		// OSSXP.COM: write xml declare.
+		fileout.write("<?xml version=\"1.0\" encoding=\"" + FreeMind.DEFAULT_CHARSET + "\"?>\n");
 		getXml(fileout, saveInvisible, getRootNode());
 	}
 	/** writes the content of the map to a writer.
@@ -412,9 +415,30 @@ public class MindMapMapModel extends MapAdapter  {
 	}
     MindMapNodeModel loadTree(ReaderCreator pReaderCreator, boolean pAskUserBeforeUpdate) throws XMLParseException, IOException {
         int versionInfoLength;
-		versionInfoLength = EXPECTED_START_STRINGS[0].length();
+        versionInfoLength = 0;
         // reading the start of the file:
-        StringBuffer buffer = readFileStart(pReaderCreator.createReader(), versionInfoLength);
+        // OSSXP.COM: 
+        //     because we add a xml declare, the mm file now begin with "<xml", 
+        //     so direct match mmap version will failed.
+        //     search "<map" and store matched line into buffer.
+        BufferedReader in=null;
+        String buffer = null;
+        try {
+        	// get the file start into the memory:
+        	in = new BufferedReader(pReaderCreator.createReader());
+        	while ((buffer = in.readLine()) != null) {
+        		// buffer contains line start with "<map", stop matching.
+        		if (buffer.substring(0,4).equals("<map"))
+        		{
+        			break;
+        		}
+        	}
+        	in.close();
+        } catch (Exception e) {
+        	e.printStackTrace();
+        	buffer = "";
+        }
+        
         // the resulting file is accessed by the reader:
         Reader reader = null;
         for(int i = 0; i < EXPECTED_START_STRINGS.length; i++){
-- 
tg: (19169f1..) t/output_encode_in_utf8 (depends on: tgmaster)
